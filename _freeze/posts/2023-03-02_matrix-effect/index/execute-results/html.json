{
  "hash": "b610e7dd6a3931e3d6236afb077133bb",
  "result": {
    "markdown": "---\ntitle: \"Matrix effect using Imagemagick\"\ndescription: \"In this tutorial I'm using R and Imagemagik to produce a Matrix-like image just using code.\"\nabstract: |\n  This tutorial provides a detailed step-by-step process that demonstrates how to use R and Imagemagik to produce a Matrix-like image as well as highlights some key take away lessons I learnt from this experiencefrom doing that.\ndate: 2023-03-05\n# title-block-banner: true\nauthor: \n  - name: \"Carlos Cámara\"\n    orcid: 0000-0002-9378-0549\n    email: carlos.camara@warwick.ac.uk\n    affiliations:\n    - name: University of Warwick\n      address: Centre for Interdisciplinary Methodologies (CIM), Social Sciences Building\n      city: Coventry\n      state: WA\n      postal-code: CV4 7AL\ncategories:\n  - R\n  - tutorial\n  - image manipulation\n  - ImageMagick\n  - Magick\n\nimage: img/datasaurus_matrix.png\nimage-alt: \"Screenshot of a Quarto document with an embedded Shinylive application.\"\nformat:\n  html:\n    toc: true\n    #code-line-numbers: true\n    reference-location: margin\neditor: visual\nbibliography: references.bib\ncitation:\n  url: \"https://dslabs.carloscamara.es/posts/2023-03-02_matrix-effect/\"\n---\n\n\nThe iconic film series \"The Matrix\" (and sequels) can be recognized by a number of technical and aesthetical features, but probably, the most unique one is their green cascading code[^1] that is present throughout the films and also its promotional imagery and fanart.\n\n[^1]: Actually, I have to admit that I find this resource as an excellent metaphor about how coding works. In those films, the Matrix (i.e., the software ruling the virtual world where humans are trapped) is often represented as a series of illegible combinations of green symbols (@fig-code). This is, Matrix's binary code. In a crucial moment of the first film, the main character has a revelation-like moment where he can suddenly understand (de-compile) the code and he can not only \"see\" what the code does (@fig-corridor), but also become extremely powerful: by manipulating the rules (compiling) he can do things no other human can.\n\nIt is no wonder, then, that the Internet is flooded by a number of tutorials or even web tools aimed at reproducing those aesthetics. However, all of them require Image Editing software such as Photoshop, like [this excellent tutorial](https://design.tutsplus.com/tutorials/how-to-make-a-matrix-effect-in-photoshop--cms-36383) from Abbey Esparza which was an inspiration for me.\n\n::: {#fig-matrix layout-ncol=\"2\"}\n![The inscrutable source code](img/matrix_code_1.jpg){#fig-code}\n\n![The source code, decyphered](img/matrix_corridor.jpg){#fig-corridor}\n\n[The Matrix](https://en.wikipedia.org/wiki/The_Matrix) (1999) © Warner Bros. Entertainment\n:::\n\nIn this case, however, I will not be using any editing software. Instead, I will be solely using code to produce a Matrix-like image like the one below (@fig-final-result), and some bonus output, too. Specifically, I'm going to use R and [`{magick}`](https://docs.ropensci.org/magick/index.html), which is an R interface for [Imagemagik](https://imagemagick.org/) developed by the [rOpensCi](https://ropensci.org/) community.\n\n::: column-page\n![That's what we will be creating](img/datasaurus_matrix.png){#fig-final-result}\n:::\n\n## Why would we want to do this using R?\n\nBefore starting with the tutorial, though, I need to be crystal clear. **I do not think that R and any of their image-manipulation packages or, more generally, a programming language, can fully replace an image editing software such as Photoshop or [GIMP](https://gimp.org)**[^2]. After all, they are made for different purposes and with different audiences in mind.\n\n[^2]: GIMP is an excellent Free/Libre OpenSource software for image manipulation, very similar (feature-wise) to Photoshop. You can visit the official website <https://gimp.org>\\\n    ![GIMP's mascot: Wilbert](https://upload.wikimedia.org/wikipedia/commons/thumb/4/45/The_GIMP_icon_-_gnome.svg/240px-The_GIMP_icon_-_gnome.svg.png)\n\nHowever, that doesn't mean that using R for handling images doesn't make sense at all. On the contrary! There are a number of cases where manipulating images from code makes a lot of sense:\n\n1.  Batch manipulation\n2.  Image transformation based on some kind of data (either metadata or linked data)\n3.  Including images as part of our data visualisation workflow/outputs\n4.  ...\n\nTherefore, this tutorial is a proof of concept and a demonstration about how can R be used for creative tasks and manipulation. It is also an exploration of the limits[^3].\n\n[^3]: Given my background as an architect, I've used Photoshop and GIMP extensively in the past, with a great deal of success. However, as someone who is interested in coding, I could see how destructive and non-reproducible the workflows can be. So, this is also a selfish exercise where I wanted to see how far I could go using R in a creative context and understanding their limits.\n\n## Why this image?\n\nWhen thinking about the first image for my pixelfed account on data visualisation, it was clear to me that I had to start with a mention to the work of Justin Matejka and George Fitzmaurice with their Datasaurus Dozen [@matejka2017] to demonstrate the importance of Data Visualisation to detect patterns in data that summary statistics cannot reveal. But because I was also aware that this is a well-known topic within the field, which has received quite a lot of attention, I wanted to find a different image to those illustrating the blog posts accompanying an explanation.\n\n![Graphical explanation of the Datasaurus Dozen by their authors ([Matejka & Fitzmaurice](https://www.autodesk.com/research/publications/same-stats-different-graphs))](img/same-stats-different-graphs-image-1920x1000.gif){#fig-datasaurus}\n\nSo when reflecting on how to represent a dinosaur hidden in data, or images appearing out of a messy dataset, I suddenly remembered the Matrix scene where Neo learns how the Matrix works and how, immediately, what used to be inscrutable code turns into recognizable images.\n\nI was immediately seduced by the idea of creating a Dinosaur (ideally similar to that in the datasaurus) emerging from what could be a Matrix-like dataset, and using data visualisation tools for that seemed the most logic (and most meta) thing to do. The text describing that (with a pun) just emphasizes that idea.\n\n## Step by step\n\nI started the process with the following outline in mind:\n\n1.  we need to combine a background image and a dinosaur (ideally with little or no colors)\n2.  we need to add some effects to the dinosaur\n3.  we need to add some text to it\n\nAs you will see, it turned out to be more complex (I needed to create more intermediate steps), but the essence is the same. The GIF[^4] below is probably the best description of what we are going to do.\n\n[^4]: This GIF has also been generated with R, refer to @sec-animated-gif for details.\n\n![Graphic overview of what we will be doing in this tutorial.](img/dino-matrix-process.gif){#fig-process-overview}\n\n### Loading dependencies\n\nin this case, we will only be using a single library: [`{magick}`](https://docs.ropensci.org/magick/index.html), developed by [Jeroen Ooms](https://github.com/jeroen). According to its website, \\[Magick provides\\]:\n\n> Bindings to ImageMagick: the most comprehensive open-source image processing library available. Supports many common formats (png, jpeg, tiff, pdf, etc) and manipulations (rotate, scale, crop, trim, flip, blur, etc). All operations are vectorized via the Magick++ STL meaning they operate either on a single frame or a series of frames for working with layers, collages, or animation. In RStudio images are automatically previewed when printed to the console, resulting in an interactive editing environment.\n\nSo the only thing we need to do is installing the package normally and then adding a call to `library()` at the beginning of our document:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(magick)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nLinking to ImageMagick 6.9.12.3\nEnabled features: cairo, fontconfig, freetype, heic, lcms, pango, raw, rsvg, webp\nDisabled features: fftw, ghostscript, x11\n```\n:::\n\n```{.r .cell-code}\n# Also save some variables.\ncol_matrix <- \"#00dc00\"\n```\n:::\n\n\n::: {.callout-important collapse=\"false\"}\nNote that because `magick` is just an interface, we need to have ImageMagick library installed in our system if it's not already installed (i.e., in Linux Machines). `magick`'s Readme file covers that <https://docs.ropensci.org/magick/articles/intro.html#installing-magick>\n:::\n\n### Load images\n\nOnly two images are needed for this tutorial: a background image and a dinousaur with a transparent background[^5]. I downloaded the T-Rex image [from Unsplash](https://unsplash.com/photos/SByb8Ch9XcQ) (thanks to the author, Amy-Leigh Barnard, for releasing it under the [Unsplash License](https://unsplash.com/license)), and I fond the matrix-like background using DuckDuckGo's search for Images under Creative Commons, which pointed me towards [Peter DeHaas' website](https://peterdehaas.net/matrix-background).\n\n[^5]: Actually, **the dinousar image is the only image I failed to generate using R**. I used GIMP to create an alpha channel and remove the background from the original Photo by <a href=\"https://unsplash.com/@amyb99?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText\">Amy-Leigh Barnard</a> on <a href=\"https://unsplash.com/images/nature/dinosaur?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText\">Unsplash</a>:![Photo by Amy-Leigh Barnard on Unsplash](img/amy-leigh-barnard-SByb8Ch9XcQ-unsplash.jpg)\\\n    \\\n    You can read a tutorial on how to do that using GIMP here: <https://www.guidingtech.com/remove-background-gimp-layer-mask/>\n\nSo, once we get the images stored in a folder within our project, we need to load them to R's environment:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load images\ndino <- image_read(\"img/amy-leigh-barnard-SByb8Ch9XcQ-unsplash.png\") \nmatrix_bg <- image_read(\"img/matrix01.webp\") \n\n# Put them together in a vector\nimages_clips <- c(dino, matrix_bg)\n\n# Display the images side by side\nimage_append(image_scale(images_clips, \"x200\"))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-2-1.png)\n:::\n\n```{.r .cell-code}\n# Display images' properties\nprint(images_clips)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  format width height colorspace matte filesize density\n1    PNG  4608   3072       sRGB  TRUE  8293810   72x72\n2   WEBP  2000   1000       sRGB FALSE   373842   72x72\n```\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-2-2.png)\n:::\n:::\n\n\nNote the different output from calling the images directly or using `print()`: the first one displays the image, whereas the later will show the image's properties as well as the image. There are two things that it's worth paying attention to judging from the images' properties:\n\n1.  They have different sizes. This would be an issue when combining images, so we need to scale them to similar sizes before doing that.\n2.  Dinousaur is stored in a PNG format. These type of formats are usually used because they have an alpha channel (in this case, a transparent background), which is extremely useful for our purposes.\n\n### Scaling images\n\nDue to the dinosaur being considerable larger than the background, we need to resize the image before combining them. There are a number of ways to alter the size of an image (with or without distortions)[^6], but we will be using `image_scale()`:\n\n[^6]: For an explanation of the available options, refer to <https://docs.ropensci.org/magick/reference/transform.html>\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Remove the extra background.\ndino <- image_trim(dino) \n\n# Scale proportionally to a height of 800px.\ndino <- image_scale(dino, \"x800\")\n```\n:::\n\n\n### Combining images (first attempt)\n\nBecause the dinosaur doesn't have any background, we can combine them by overlying it on top of the background using `image_composite()`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nimage_composite(matrix_bg, dino)\n```\n\n::: {.cell-output-display}\n![First attempt at compositing two images](index_files/figure-html/fig-composite-1-1.png){#fig-composite-1}\n:::\n:::\n\n\n::: {.callout-caution collapse=\"true\"}\n### Order matters!\n\nPay attention to the order of the images, as it does matter! The first one will be placed on top of the second.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nimage_composite(dino, matrix_bg) \n```\n\n::: {.cell-output-display}\n![Resuling image with wrong order: the background is completely covering the dinousaur](index_files/figure-html/fig-composite-order-1.png){#fig-composite-order}\n:::\n:::\n\n\nActually, this output is very similar to something we will want to achieve at a latter point.\n:::\n\nAs you can see, by default composite image gets the size of the first image and adds a second one aligned from its top left position. Because both images have different sizes, the dinosaur seems to be floating. We can control the alignment using the `gravity` pattern, which accepts several strings[^7].\n\n[^7]: For the full list of accepted strings refer to this page at ImageMagick's documentation <https://www.imagemagick.org/Magick++/Enumerations.html#GravityType>\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# We can use gravity to control alignment\nimage_composite(matrix_bg, dino, gravity = \"SouthEast\") \n```\n\n::: {.cell-output-display}\n![Controlling images alignment with gravity parameter](index_files/figure-html/fig-composite-alignment-1.png){#fig-composite-alignment}\n:::\n:::\n\n\nNow it's slightly better, but the dinosaur stands out too much, and it is clear that there are two juxtaposed images that have nothing to do one with each other. We will try to address that by:\n\n1.  Dessaturating / coloring it\n2.  Adding the code on top of it\n\n### Color dessaturation\n\nOne of the outstanding features of The Matrix imagery is by the absence of colors except for green and black. This effect has been accentuated over time (see @fig-matrix-posters-evolution ), and has often implied using dessaturated images (the clearer examples are @fig-poster-2023b and @fig-poster-2019). We are going to try to achieve that with our dinosaur.\n\n::: {#fig-matrix-posters-evolution layout-ncol=\"5\"}\n![The Matrix (1999)](img/Screenshot%202023-03-04%20at%2011-40-51%20The%20Matrix%20(1999).png){#fig-poster-1999}\n\n![The Matrix Reloaded (2003)](img/Screenshot%202023-03-04%20at%2011-41-20%20The%20Matrix%20Reloaded%20(2003).png){#fig-poster-2003}\n\n![The Matrix Revolutions (2003)](img/Screenshot%202023-03-04%20at%2011-41-44%20The%20Matrix%20Revolutions%20(2003).png){#fig-poster-2023b}\n\n![20th Anniversary poster (2019)](img/promo-20-anniversary-matrix.jpg){#fig-poster-2019}\n\n![The Matrix Ressurrections (2021)](img/Screenshot%202023-03-04%20at%2011-42-37%20The%20Matrix%20Resurrections%20(2021).png){#fig-poster-2021}\n\nEvolution of The Matrix series' graphic image through its posters (1999) © Warner Bros. Entertainment\n:::\n\nThe most immediate way to remove the colours from an image is to convert it to a grayscale image:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Convert to grayscale\ndino_grey <- image_quantize(dino, colorspace = 'gray')\n\ndino_grey\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-7-1.png)\n:::\n:::\n\n\n::: {.callout-tip collapse=\"true\"}\n### Dessaturation\n\nAn alternative that gives more control is to change saturation. Moving the saturation somewhere between 100 (maximum value: all colors) and 1 (minimum value: grayscale) gives more control and interesting results.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Or better, partially dessaturate the image\ndino_grey2 <- image_modulate(dino, saturation = 20)\ndino_grey2\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-8-1.png)\n:::\n\n```{.r .cell-code}\nimage_modulate(dino, saturation = 20, brightness = 200)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-8-2.png)\n:::\n:::\n\n\nThis result is probably more similar to @fig-poster-2019\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# We can use gravity to control alignment\nimage_composite(matrix_bg, dino_grey, gravity = \"SouthEast\") \n```\n\n::: {.cell-output-display}\n![Composition with greyscale dino](index_files/figure-html/fig-composite-grey-1.png){#fig-composite-grey}\n:::\n:::\n\n\nThis is getting better, but probably, it would be even better if the dinosaur was greener (something similar to @fig-poster-2023b . One way to do that could be by colorizing the image:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# We can use image colorize with low opacity values\ndino_green <- image_colorize(dino_grey2, opacity = 40, color =  \"#379b47\")\ndino_green\n```\n\n::: {.cell-output-display}\n![Colorized image, with low opacity](index_files/figure-html/fig-colorize-1.png){#fig-colorize}\n:::\n:::\n\n\nLet's see how it looks when combined with our background.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nimage_composite(matrix_bg, dino_green, gravity = \"SouthEast\") \n```\n\n::: {.cell-output-display}\n![Composition with coloured dino](index_files/figure-html/fig-composite-green-1.png){#fig-composite-green}\n:::\n:::\n\n\nRegretfully, this doesn't look particularly good: the dinosaur's details seemed veiled (actually, that's what we did: we covered the dinosaur with a thin, green veil).\n\nWe are going to use a slightly different approach now. This time we will be combining a greyscale version with a green image, but using `multiply` as the blend mode. Multiply will keep the same details of the original image, but will result in a darker image (which in this case, is also desired!)[^8] . Also, because we do not have a green image, we will need to create one from scratch using `image_blank()`:\n\n[^8]: For more information about `multiply` blend mode, refer to this tutorial <https://digital-photography-school.com/multiply-blend-mode/> . Also, the wikipedia has information about different blend modes, including, but not limited to, multiply: <https://en.wikipedia.org/wiki/Blend_modes>\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# We need to create an image of the same size with just colour green.\ngreen_img <-  image_blank(2000, 1000, color = col_matrix)\n\n# Combine two images using Multiply blend mode.\ndino_green2 <- image_composite(dino_grey2, green_img, operator = \"Multiply\")\n\ndino_green2\n```\n\n::: {.cell-output-display}\n![Multiply produces a sharper green dino, but transparency is lost.](index_files/figure-html/fig-mulitply-green-1.png){#fig-mulitply-green}\n:::\n:::\n\n\nAs you can see, this dinosaur is darker and their details (shades) don't look so washed away as the previous one (@fig-colorize). Regretfully, the colour is also added to the background, which used to be transparent, so we will need to restore the alpha channel. We will do that by creating yet another composite, but using `copyopacity` operator this time to copy the alpha channel from the original dinosaur.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Restoring alpha channel.\ndino_green2 <- image_composite(dino_green2, dino, operator = 'copyopacity')\n\n# Compare results\nimage_append(image_scale(c(dino_green, dino_green2), \"x250\"))\n```\n\n::: {.cell-output-display}\n![Green dinos' comparison: colorised (left) and mulitplied (right)](index_files/figure-html/fig-green-dinos-compared-1.png){#fig-green-dinos-compared}\n:::\n:::\n\n\nAnd now, we can combine the green dinosaur with the background:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nimage_composite(matrix_bg, dino_green2, gravity = \"SouthEast\") \n```\n\n::: {.cell-output-display}\n![Composition with coloured dino (multiply version)](index_files/figure-html/fig-composite-green2-1.png){#fig-composite-green2}\n:::\n:::\n\n\n### Adding code texture to the dinosaur\n\nBecause we wanted to recreate the effect on @fig-corridor that suggests that the dinosaur is also made of code, we will need to over impress the source code over the T-Rex. To do that, we could apply the same technique we used for @fig-green-dinos-compared and merge the background with the dinosaur using the `copyopacity` operator.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndino_matrix <- image_composite(matrix_bg, dino_green2, operator = 'copyopacity', \n                               gravity = \"SouthEast\")\n\ndino_matrix\n```\n\n::: {.cell-output-display}\n![Matrix code within the dinosaur silhouette.](index_files/figure-html/fig-dino-matrix-1.png){#fig-dino-matrix}\n:::\n:::\n\n\nWe are almost there! We have the code applied to the dinosaur, but the texture and details have been lost, only its silhouette has been preserved! We will combine two images, but using the `dissolve` blend mode:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndino_matrix <- image_composite(dino_matrix, dino_green2, compose_args = \"60%\", \n                               operator = \"dissolve\", gravity = \"SouthEast\")\n\ndino_matrix\n```\n\n::: {.cell-output-display}\n![A green dinosaur with the Matrix code and its texture applied.](index_files/figure-html/fig-dino-matrix2-1.png){#fig-dino-matrix2}\n:::\n:::\n\n\nThis looks nice[^9], so now we can combine that with the background:\n\n[^9]: Probably, the dinosaur is too green now. If that's the case, we could try to overlay the code on top of the grey dinosaur or the slightly dessaturated version, instead of the green T-Rex. However, for the sake of better illustrating the next step, I will be using this version.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nimage_composite(matrix_bg, dino_matrix, gravity = \"SouthEast\") \n```\n\n::: {.cell-output-display}\n![Composition with the dino with code. Not nice.](index_files/figure-html/fig-composite-matrix-1.png){#fig-composite-matrix}\n:::\n:::\n\n\nThe resulting image is way less impressive that what he had imagined, right? Why isn't it looking as good as the previous compositions if the dinosaur with the code looked even better than the previous ones? Basically, the problem is that because we have used the same image for the background and as a texture over the dinosaur, the background and foreground are matching and it seems we just added it on top of a green dinosaur, which is not what we wanted to achieve (it seems that there's a dinosaur behind a curtain of raining letters).\n\nThere are different ways to overcome that issue:\n\n1.  Use different (but similar) images for the background and the code texture (that would be ideal, but I didn't have much time to find images, also, it will be good for teaching purposes)\n2.  Modify the background so it looks slightly different.\n\n### Modifying the background\n\nIn order to make the background look like a different image than the code from the foreground, we are going to do these two transformations:\n\n1.  Displace it\n2.  Blur it\n\nBecause this is getting long, I'm becoming lazier, and in this case I will use the pipe operator to chain several transformations and I will also use `image_flop()` instead of moving the background using some of the [image transformations](https://docs.ropensci.org/magick/reference/transform.html) provided by `{magick}`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmatrix_bg2 <- matrix_bg %>% \n  image_flop() %>% # This creates a vertical mirror, which is a lazy way to move the background\n  image_blur(10, 10) \n\nimage_composite(matrix_bg2, dino_matrix, gravity = \"SouthEast\") \n```\n\n::: {.cell-output-display}\n![Composition with the dino with code, after altering the background](index_files/figure-html/fig-composite-matrix2-1.png){#fig-composite-matrix2}\n:::\n:::\n\n\nNow we can see that dinosaur! However, I realised that in some recent posters, the images are not completely green, but have some greyish texture. We could try to do the same, but instead of having an entirely green dinosaur, using one of the grey versions with code overlayed on them.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndino_matrix2 <- image_composite(dino_matrix, dino_grey2, compose_args = \"40%\", \n                                operator = \"dissolve\", gravity = \"SouthEast\")\n\nimage_composite(matrix_bg2, dino_matrix2, gravity = \"SouthEast\") \n```\n\n::: {.cell-output-display}\n![Same composition, but the dino is not completely green.](index_files/figure-html/fig-composite-matrix3-1.png){#fig-composite-matrix3}\n:::\n:::\n\n\nWay better now! We can see that the dinosaur now stands out against the background, but we could do better: we could add a light green glow around the dinosaur, just like the original imagery does.\n\n### Glow effect\n\nThis is probably one of the trickiest parts of this tutorial. Imagemagik (and therefore, `{magick}`) allow a limited range of effects ([check all of them here](https://docs.ropensci.org/magick/reference/effects.html)), but none of them consists of projecting an *inner* or *outer glow*, which is what you'd do in Photoshop or GIMP. For a while I played with the idea of projecting an outer shadow using `image_shadow()` (but it would only project square shadows) or `image_shadow_mask()` but only seems to work for vector images.\n\nSo, instead, we will be achieving that in several steps:\n\n1.  Create a light green silhouette\n2.  Scale it to make it slightly bigger than the original, so it seems like a contour\n3.  Blur the contour image\n4.  Add it below the dinosaur\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create a glow effect\ndino_glow_tmp1 <- dino_green %>% \n  image_colorize(color = \"#00dc00\", opacity = 100) %>% \n  image_blur(200, sigma = 20)\n\n# We are ready to add the dino on top of it!\ndino_glow_tmp2 <- dino_glow_tmp1 %>% \n  image_composite(dino_grey2, gravity = \"southeast\") # Using grey version to highlight the effect.\n\n# Compare results\nimage_append(image_scale(c(dino_glow_tmp1, dino_glow_tmp2), \"x250\"))\n```\n\n::: {.cell-output-display}\n![Glowing silouetthe (left) and glowing dino (right). First attempt.](index_files/figure-html/fig-glowing-dino-1.png){#fig-glowing-dino}\n:::\n:::\n\n\nFigure on the left shows a perfectly green T-Rex with blurry contour, so wen we overlay a dinosaur on top of it, it looks like if it was glowing. It looks pretty neat, right? Well... except that there is an issue. Look at the upper border and left side of the image: the glow looks trimmed! Actually, because the glow exceeds the size of the original image, the glow also exceeds the canvas and it is not shown on those areas.\n\nTo fix this we will need to make the canvas (not the image) a little bit bigger, making room for the glow to grow without being trimmed. We will do that using `image_extent()`, paying attention to make the canvas grow from the bottom right corner (because that's the point we are using to align the dino within the background). Once we are done with that, we can then remove any extra white space using `image_trim()` and proceed to add the dinosaur with the code on top of it.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndino_matrix_glow <- dino_green %>% \n  image_colorize(color = \"#00dc00\", opacity = 100) %>% \n  image_extent(\"1200x900\", gravity = \"southeast\") %>% # Increase the canvas' size.\n  image_blur(200, sigma = 20) %>% \n  image_trim() %>%  # Remove the extra canvas space\n  image_composite(image_trim(dino_matrix2), gravity = \"southeast\")\n\ndino_matrix_glow\n```\n\n::: {.cell-output-display}\n![Glowing T-Rex, now without trimmed glows.](index_files/figure-html/fig-glowing-dino2-1.png){#fig-glowing-dino2}\n:::\n:::\n\n\nAnd this is how the the final composition would look like when we add the glowing dinosaur to the background (compare it to @fig-composite-matrix3)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nimage_composite(matrix_bg2, dino_matrix_glow, gravity = \"SouthEast\")\n```\n\n::: {.cell-output-display}\n![Adding the glowing dinosaur to the composition](index_files/figure-html/fig-composite-matrix4-1.png){#fig-composite-matrix4}\n:::\n:::\n\n\nAnd we are almost done, now! We could add some text on top of the image, and that would be it.\n\n### Adding text\n\nAdding text over images is pretty straightforward using `image_annotate()`, but there are some considerations to be made for this particular case:\n\n1.  We have a dark image, so we will need to give the text a light color, as opposed to the default black color\n2.  The image is quite big, so we will have to either scale it down or use big fonts\n\n\n::: {.cell}\n\n```{.r .cell-code}\nannotated_dino <- image_composite(matrix_bg2, dino_matrix_glow, gravity = \"SouthEast\") %>% \n  image_annotate(\n    text = \"This text is shown in the top left corner\",\n    color = \"white\",\n    size = 30\n  )\n\nannotated_dino\n```\n\n::: {.cell-output-display}\n![Adding our first text.](index_files/figure-html/fig-adding-text1-1.png){#fig-adding-text1}\n:::\n:::\n\n\nAs you can see, the text is positioned on the top left corner of the image, but we can control that with the parameters `gravity` and `location`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nannotated_dino2 <- image_composite(matrix_bg2, dino_matrix_glow, gravity = \"SouthEast\") %>% \n  image_annotate(\n    text = \"This text is shown in the top left corner (with padding)\",\n    color = \"white\",\n    size = 30,\n    location = \"+100+100\"\n  ) %>% \n  image_annotate(\n    text = \"This text is shown in the center, slightly rotated\",\n    color = \"white\",\n    size = 30,\n    gravity = \"center\",\n    degrees = 20\n  ) %>% \n  image_annotate(\n    text = \"This text is shown in the bottom right\",\n    color = \"white\",\n    size = 30,\n    gravity = \"southeast\",\n    location = \"+100+100\"\n  )\n\nannotated_dino2\n```\n\n::: {.cell-output-display}\n![Combining several text strings and controlling their position](index_files/figure-html/fig-adding-text2-1.png){#fig-adding-text2}\n:::\n:::\n\n\nThese are the basics, but there are other interesting parameters we can use with `image_annotate()` to control the font family, text rotation, style, decoration, kerning... but I'm sure you get the idea.\n\nIn the example below, I'm using two custom font types that are Matrix-theme inspired and are also free to use:\n\n1.  [Miltown II](https://www.1001fonts.com/miltown-ii-font.html) by Apostrophic Labs\n2.  [White rabbit](https://www.1001fonts.com/white-rabbit-font.html) by Matthew Welch\n\n\n::: {.cell .column-page}\n\n```{.r .cell-code}\nfinal_image <- image_composite(matrix_bg2, dino_matrix_glow, gravity = \"SouthEast\")  %>% \n  image_annotate(\n    text = \"Data visualisation use cases:\",\n    font = \"white rabbit\",\n    color = \"white\",\n    strokecolor = \"#A7F4A7\",\n    size = 30,\n    weight = 700,\n    location = \"+90+90\"\n  ) %>% \n  image_annotate(\n    text = \"#1: to find dinosaurs\", \n    font = \"miltown ii\",\n    color = \"white\",\n    strokecolor = \"#A7F4A7\",\n    size = 70, \n    weight = 700,\n    location =\"+90+120\") %>% \n  image_annotate(\n    text = \"Data can contain hidden \\nand suprising patterns \\nthat only visualisations \\ncan reveal\",\n    font = \"white rabbit\",\n    color = \"white\",\n    strokecolor = \"#A7F4A7\",\n    size = 40,\n    location = \"+90+400\"\n  ) %>% \n  image_annotate(\n    text = \"Great examples of this are the Anscombe quartet \\nor the Datasaurus Dozen (Matejka & Fitzmaurice, 2017)\",\n    font = \"white rabbit\",\n    color = \"white\",\n     strokecolor = \"#A7F4A7\",\n    size = 28,\n    gravity = \"southwest\",\n    location = \"+90+90\"\n  ) %>% \n  image_annotate(\n    text = \"Source: datasaurus@pixelfed.social\",\n    color = \"white\",\n    gravity = \"southeast\",\n    location = \"+50+50\",\n    size = 18\n  )\n\nfinal_image\n```\n\n::: {.cell-output-display}\n![The final image](index_files/figure-html/fig-final1-1.png){#fig-final1}\n:::\n:::\n\n\nSo this is it! We made it! Now we only need to save the image and start using it!\n\n\n::: {.cell}\n\n```{.r .cell-code}\nimage_write(final_image, \"img/datasaurus_matrix.png\")\n```\n:::\n\n\n### Putting everything together {#sec-putting-everything-together}\n\nWe could try to replicate the same image in a more compressed way:\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"true\"}\ncol_matrix <- \"#00dc00\"\n\nmatrix_bg <- image_read(\"img/matrix01.webp\") \n\ndino <- image_read(\"img/amy-leigh-barnard-SByb8Ch9XcQ-unsplash.png\") %>% \n  image_trim() %>% \n  image_scale(\"x800\") %>% \n  image_modulate(saturation = 15)\n\ndino_matrix <- image_composite(matrix_bg, dino, operator = 'copyopacity', \n                               gravity = \"SouthEast\") %>% \n  image_composite(dino, compose_args = \"50%\", \n                               operator = \"dissolve\", gravity = \"SouthEast\")\n\ndino_matrix_glow <- dino_matrix %>% \n  image_colorize(color = col_matrix, opacity = 100) %>% \n  image_extent(\"1200x900\", gravity = \"southeast\") %>% # Increase the canvas' size.\n  image_blur(200, sigma = 20) %>% \n  image_trim() %>%  # Remove the extra canvas space\n  image_composite(image_trim(dino_matrix), gravity = \"southeast\")\n\nmatrix_bg2 <- matrix_bg %>% \n  image_flop() %>% \n  image_blur(10, 10) \n\nimage_composite(matrix_bg2, dino_matrix_glow, gravity = \"SouthEast\") %>% \n  image_annotate(\n    text = \"Data visualisation use cases:\",\n    font = \"white rabbit\",\n    color = \"white\",\n    strokecolor = \"#A7F4A7\",\n    size = 30,\n    weight = 700,\n    location = \"+90+90\"\n  ) %>% \n  image_annotate(\n    text = \"#1: to find dinosaurs\", \n    font = \"miltown ii\",\n    color = \"white\",\n    strokecolor = \"#A7F4A7\",\n    size = 70, \n    weight = 700,\n    location =\"+90+120\") %>% \n  image_annotate(\n    text = \"Data can contain hidden \\nand suprising patterns \\nthat only visualisations \\ncan reveal\",\n    font = \"white rabbit\",\n    color = \"white\",\n    strokecolor = \"#A7F4A7\",\n    #strokecolor = \"#379b47\",\n    size = 40,\n    location = \"+90+400\"\n  ) %>% \n  image_annotate(\n    text = \"Great examples of this are the Anscombe quartet \\nor the Datasaurus Dozen (Matejka & Fitzmaurice, 2017)\",\n    font = \"white rabbit\",\n    color = \"white\",\n     strokecolor = \"#A7F4A7\",\n    size = 28,\n    gravity = \"southwest\",\n    location = \"+90+90\"\n  ) %>% \n  image_annotate(\n    text = \"Source: datasaurus@pixelfed.social\",\n    color = \"white\",\n    gravity = \"southeast\",\n    location = \"+50+50\",\n    size = 18\n  ) %>% \n  image_scale(\"1000x\")\n```\n\n::: {.cell-output-display}\n![The same image, created from scratch in 69 lines of code](index_files/figure-html/fig-final-condensed-1.png){#fig-final-condensed}\n:::\n:::\n\n\n::: {.callout-caution collapsed=\"true\"}\n## Spot the difference?\n\nDespite I said images @fig-final1 and @fig-final-condensed are the same, they are slightly different. Can you spot the difference? Would you be able to make changes in the code to make them look the same?\n:::\n\n### Bonus: Animated GIF {#sec-animated-gif}\n\nCreating an animated GIF of the entire process is really straightforward. We just need to add the relevant images to a vector, and then use `image_animate()` to generate the GIF.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Add key images to a vector.\nimages_clips <- c(\n  matrix_bg,\n  image_extent(dino, \"2000x1000\", gravity = \"southeast\"),\n  image_composite(matrix_bg, dino, gravity = \"SouthEast\"),\n  image_extent(dino_grey, \"2000x1000\", gravity = \"southeast\"),\n  image_extent(dino_grey2, \"2000x1000\", gravity = \"southeast\"),\n  image_composite(matrix_bg, dino_grey2, gravity = \"SouthEast\"),\n  image_extent(image_colorize(dino_grey2, opacity = 40, color =  \"#379b47\"),\n               \"2000x1000\", gravity = \"southeast\"),\n  image_extent(dino_green2, \"2000x1000\", gravity = \"southeast\"),\n  image_composite(matrix_bg, dino_green2, gravity = \"SouthEast\"),\n  image_composite(matrix_bg, dino_green2, operator = 'copyopacity', \n                               gravity = \"SouthEast\"),\n  image_extent(dino_matrix, \"2000x1000\", gravity = \"southeast\"),\n  # dino_matrix2,\n  image_composite(matrix_bg, dino_matrix, gravity = \"SouthEast\"),\n  matrix_bg2,\n  image_composite(matrix_bg2, dino_matrix2, gravity = \"SouthEast\"),\n  image_extent(dino_glow_tmp1, \"2000x1000\", gravity = \"southeast\"),\n  image_extent(dino_glow_tmp2, \"2000x1000\", gravity = \"southeast\"),\n  image_extent(dino_matrix_glow, \"2000x1000\", gravity = \"southeast\"),\n  image_composite(matrix_bg2, dino_matrix_glow, gravity = \"SouthEast\"),\n  annotated_dino,\n  annotated_dino2,\n  final_image,\n  final_image\n)\n\n# Generate the animation\nprocess_gif <- image_animate(image_scale(images_clips, \"x500\"), fps = 2)\n\n# Visualise the animation\nprocess_gif\n\n# Save it as a GIF\nimage_write(process_gif, \"img/dino-matrix-process.gif\")\n```\n\n::: {.cell-output-display}\n![Animated GIF of the process](index_files/figure-html/fig-process-animated-1.gif){#fig-process-animated}\n:::\n:::\n\n\n## Conclusion\n\nThroughout this post, we've learnt that we can use R (and coding) for creative purposes. There are several takeaways from this experience:\n\n1.  Manipulating images with R is relatively straightforward from a technical standpoint: it works pretty much in the same way you'd work with regular data (we can even use tidyverse's pipe operators for that!). Proof is that creating that image would only require 69 lines of very readable code, as demonstrated in @sec-putting-everything-together\n2.  However, that doesn't mean it's easy or fast. Admittedly, I spent a lot of time doing this, way more than if I would have used GIMP instead. It's true that I'm way more experienced using GIMP and it is my first experience using magick in R (not bad for a first timer!), so that shouldn't be a surprise. Where I pent most time of was planning what I wanted to do, and repeating it by trial and error. Admittedly, this is true from every creative process and not very different from what would have happened with GIMP or Phosothop. However, not having a GUI makes you perform some extra steps. On the bright side, repeating the same tasks while changing some parameters is extremely fast and easy when you are coding.\n3.  There are some things where I feel I could have done better with GIMP, as I'd have full control over the image (i.e., by working with level curves, or applying some gradients in some areas), not to mention that there are way more effects I can apply.\n4.  Probably the reasons for manipulating code are better summarised in the code used to generate @fig-process-animated : I really love the idea of having a creative process that can be entirely reproduced in a matter of seconds. And what is more, it is a non-destructive process which can also be easily tweaked (i.e. using a different image for the background, changing the text, changing the green colour...). This is particularly true if we were to repeat the process a number of times with minor tweaks or wanted to make sure of the process' provenance, something where Image Editors fail at doing, and the only way to overcome that is to keep intermediate steps stored in their native file format. To make things worse those files are usually huge in terms of file size.\n5.  Storing all the steps in code ensures the process' provenance in a more efficient way: code is stored in text files which are very small in terms of file size and can be version controlled.\n\nSo, all in all, while not that popular, using coding for image manipulation makes a lot of sense in some cases like the ones outlined before, and it's a practice I am willing to use more frequently.\n\n## Resources\n\n-   <https://ropensci.org/blog/2019/09/27/ropensci-docs/>\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}